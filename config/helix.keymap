#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define LOWER  1
#define RAISE  2



/ {
    behaviors {

        minustap: minustap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp MINUS>, <&minustapmacro>;
        };

        minustapmacro: minustapmacro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =  <&kp BACKSPACE &kp BACKSPACE>,
                        <&sl 1>
                        ;
        };

        backspacemacro: backspacemacro{
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =  <&kp BACKSPACE>,
                        <&sl 1>
                        ;
        };


        euro: euro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>; // Must be 0
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8>
                , <&macro_release &kp LALT>
                ;
        };

        pminus: p_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp P>, <&kp MINUS>;
            mods = <(MOD_LGUI|MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
        equalMod: equal_mod {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp EQUAL>;
            mods = <(MOD_LGUI|MOD_LCTL)>;
        };
        lbrace: left_brace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp LBKT>;
            mods = <(MOD_LGUI|MOD_LCTL)>;
        };
        rbrace: right_brace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp RBKT>;
            mods = <(MOD_LGUI|MOD_LCTL)>;
        };
        dashTap: dash_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp P>, <&kp MINUS>, <&kp N3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESCAPE          &kp N1                &kp N2            &kp N3              &kp N4          &kp N5                                                      &kp N6                 &kp N7             &kp N8         &kp N9          &kp N0         &minustap
                &kp TAB             &kp Q                 &kp W             &kp E               &kp R           &kp T                                                       &kp Y                  &kp U              &kp I          &kp O           &kp P          &equalMod
                &kp GRAVE           &kp A                 &kp S             &kp D               &kp F           &kp G                                                       &kp H                  &kp J              &kp K          &kp L           &kp SEMI       &kp SQT
                &kp LSHFT           &kp Z                 &kp X             &kp C               &kp V           &kp B           &kp LEFT_BRACKET         &kp RIGHT_BRACKET  &kp N                  &kp M              &kp COMMA      &kp PERIOD      &kp UP         &kp RET
                &mo 1               &kp LEFT_CONTROL      &kp LALT          &kp LGUI            &euro           &mo 2           &kp SPACE                &kp SPACE          &kp BACKSPACE          &kp SLASH          &kp BACKSLASH  &kp LEFT        &kp DOWN       &kp RIGHT
            >;
        };

        lower_layer {
            bindings = <
                &trans              &trans                &trans            &trans            &trans            &trans                                                        &trans          &trans          &trans            &trans              &trans           &backspacemacro
                &trans              &trans                &trans            &trans            &trans            &trans                                                        &trans          &trans          &trans            &trans              &trans           &trans
                &trans              &trans                &trans            &trans            &trans            &trans                                                        &trans          &trans          &trans            &trans              &kp K_MUTE       &trans
                &trans              &trans                &trans            &trans            &trans            &trans            &trans                    &trans            &trans          &trans          &trans            &trans              &kp C_VOLUME_UP  &trans
                &trans              &trans                &trans            &trans            &trans            &trans            &trans                    &trans            &trans          &trans          &kp C_PLAY_PAUSE  &kp C_PREV          &kp C_VOL_DN     &kp C_NEXT
            >;
        };

        raise_layer {
            bindings = <
                &sys_reset          &bt BT_SEL 0          &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4                                                      &trans          &trans          &trans          &trans                  &trans          &trans
                &trans              &bt BT_PRV            &bt BT_NXT        &trans            &bt BT_CLR    &trans                                                            &trans          &trans          &trans          &trans                  &trans          &trans
                &trans              &out OUT_TOG          &out OUT_USB      &out OUT_BLE      &trans        &trans                                                            &trans          &trans          &trans          &trans                  &trans          &trans
                &trans              &trans                &trans            &trans            &trans        &trans                &ext_power EP_TOG         &ext_power EP_TOG &trans          &trans          &trans          &trans                  &trans          &trans
                &trans              &trans                &trans            &trans            &trans        &trans                &trans                    &trans            &trans          &trans          &trans          &trans                  &trans          &trans
            >;
        };
    };
};
